# docker-compose-updated.yml - Compatible with your existing postgres
version: '3.8'

services:
  # Use your existing postgres setup
  postgres:
    image: postgres:16
    container_name: mlflow-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: mlapp
    ports:
      - "5432:5432"
    volumes:
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/01-init-mlflow.sql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ml-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mlflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for artifact storage
  minio:
    image: minio/minio:latest
    container_name: mlflow-minio
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - ml-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # MLflow server
  mlflow:
    image: python:3.9-slim
    container_name: mlflow-server
    ports:
      - "5000:5000"
    volumes:
      - ./mlflow-requirements.txt:/tmp/requirements.txt
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow_user:pass@postgres:5432/mlflow_db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts/
      - AWS_ACCESS_KEY_ID=minio_user
      - AWS_SECRET_ACCESS_KEY=minio_password
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    command: >
      bash -c "
        apt-get update && apt-get install -y curl &&
        pip install -r /tmp/requirements.txt &&
        sleep 15 &&
        mlflow server 
          --backend-store-uri postgresql://mlflow_user:pass@postgres:5432/mlflow_db
          --default-artifact-root s3://mlflow-artifacts/
          --host 0.0.0.0 
          --port 5000
          --serve-artifacts
      "
    networks:
      - ml-network
    restart: unless-stopped

  # BERT API
  bert-api:
    build: .
    container_name: bert-sentiment-api
    ports:
      - "8000:8000"
    depends_on:
      - mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minio_user
      - AWS_SECRET_ACCESS_KEY=minio_password
    networks:
      - ml-network
    restart: unless-stopped

  # MinIO bucket setup
  minio-setup:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - ml-network
    entrypoint: >
      bash -c "
        sleep 5 &&
        mc alias set myminio http://minio:9000 minio_user minio_password &&
        mc mb myminio/mlflow-artifacts --ignore-existing &&
        echo 'MinIO setup complete'
      "
    profiles:
      - setup

networks:
  ml-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data: